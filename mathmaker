#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright 2006-2015 Nicolas Hainaux <nico_h@users.sourceforge.net>

# This file is part of Mathmaker.

# Mathmaker is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# Mathmaker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Mathmaker; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

#import time
#start_time = time.time()
import sys, os
import gettext
import argparse

from _version import __version__
from lib.common import settings

settings.init()

from lib.common import shared
from lib.common import software
from lib.common.settings import CONFIG
from lib import error
from lib import startup_actions
import machine
import sheet

def main():
    parser = argparse.ArgumentParser(description=\
                        'Creates mathematical exercices and their answers.')
    parser.add_argument("-l", "--language", action='store', dest='lang',
                        default=CONFIG["LOCALES"]["LANGUAGE"],
                        help="force the language of the output to LANGUAGE." \
                             + " Default value is configured in " \
                             + "mathmaker's config file.")
    parser.add_argument('main_directive', metavar='D',
                        help='the main directive, what can be either a xml ' \
                        + 'file or a sheetname included in mathmaker.')
    parser.add_argument('--version', '-v',
                        action='version',
                        version=software.NAME + " " + __version__ \
                                        + "\nLicense: " + software.LICENSE \
                                        + "\n" + software.COPYRIGHT + " " \
                                        + software.AUTHOR)
    args = parser.parse_args()

    startup_actions.check_dependencies()

    settings.language = args.lang
    shared.init()

    try:
        gettext.translation(software.NAME,
                            settings.localedir,
                            [args.lang]).install()
    except IOError as msg:
        error.write_warning("gettext returned the following message:\n" \
                            + str(msg) + "\n" \
                            + "It means the language indicated either \
in the command line or read from the configuration file isn't available yet \
in {software_ref} which will try to produce output in the language of your \
system.".format(software_ref=software.NAME) + "\n" )
        try:
            gettext.install(software.NAME,
                            settings.localedir,
                            [locale.getdefaultlocale()[0]])
            settings.language = locale.getdefaultlocale()[0]
        except IOError as msg:
            error.write_warning("gettext returned the following message:\n" \
                            + str(msg) + "\n" \
                            + "It means the language of your system isn't \
available yet in {software_ref} which will produce output in \
english. If this results in producing an error, then your installation isn't \
complete.".format(software_ref=software.NAME) + "\n")
            gettext.translation(software.NAME,
                                settings.localedir,
                                ['en']).install()
            settings.language = 'en'


    M = machine.LaTeX(args.lang)

    if args.main_directive in sheet.AVAILABLE:
        sh = sheet.AVAILABLE[args.main_directive][0](M)

    elif args.main_directive in sheet.catalog.XML_SHEETS:
        sh = sheet.S_Generic(M,
                        filename=sheet.catalog.XML_SHEETS[args.main_directive])

    elif os.path.isfile(args.main_directive):
        sh = sheet.S_Generic(M, filename=args.main_directive)

    else:
        sys.stderr.write("Error: " + args.main_directive \
                         + " is not a correct argument "\
                         + "for " \
                         + software.NAME \
                         + ", you should use any item from the following " \
                         + " list:\n" \
                         + str(sorted([key for key in sheet.AVAILABLE]))\
                         + str(sorted([key for key in \
                                                sheet.catalog.XML_SHEETS]))\
                         + "\n")

        #print("--- {sec} seconds ---"\
        #      .format(sec=round(time.time() - start_time, 3)))
        sys.exit(2)

    M.write(str(sh))


if __name__ == '__main__':
    main()
    #print("--- {sec} seconds ---".format(sec=time.time() - start_time))
