#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright 2006-2015 Nicolas Hainaux <nico_h@users.sourceforge.net>

# This file is part of Mathmaker.

# Mathmaker is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# Mathmaker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Mathmaker; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

#import time
#start_time = time.time()
import sys, os
import argparse

from lib import __info__, __software_name__

import settings
settings.init()
from lib import shared
from lib import startup_actions
from lib import sheet

log = settings.mainlogger

def main():
    startup_actions.check_dependencies()
    parser = argparse.ArgumentParser(description=\
                        'Creates maths exercices and their answers.')
    parser.add_argument("-l", "--language", action='store', dest='lang',
                        default=settings.language,
                        help="force the language of the output to LANGUAGE." \
                             + " Default value is configured in " \
                             + "mathmaker's config file.")
    parser.add_argument('main_directive', metavar='[DIRECTIVE|FILE]',
                        help='this can be either a sheetname included in '\
                             'mathmaker or a mathmaker xml file.')
    parser.add_argument('--version', '-v',
                        action='version',
                        version=__info__)
    args = parser.parse_args()
    startup_actions.install_gettext_translations(language=args.lang)
    # From now on, settings.language has its definitive value
    startup_actions.check_settings_consistency()
    shared.init()

    if args.main_directive in sheet.AVAILABLE:
        sh = sheet.AVAILABLE[args.main_directive][0]()
    elif args.main_directive in sheet.catalog.XML_SHEETS:
        sh = sheet.S_Generic(
                        filename=sheet.catalog.XML_SHEETS[args.main_directive])
    elif os.path.isfile(args.main_directive):
        sh = sheet.S_Generic(filename=args.main_directive)
    else:
        log.error(args.main_directive \
                  + " is not a correct directive for " + __software_name__ \
                  + ", you should use any item from the following lists: " \
                  + str(sorted([key for key in sheet.AVAILABLE]))\
                  + str(sorted([key for key in sheet.catalog.XML_SHEETS])))
        #print("--- {sec} seconds ---"\
        #      .format(sec=round(time.time() - start_time, 3)))
        sys.exit(2)

    try:
        shared.machine.write_out(str(sh))
    except Exception:
        log.error("An exception occured during the creation of the sheet.",
                  exc_info=True)

    shared.db.commit()
    shared.db.close()
    log.info("Done.")


if __name__ == '__main__':
    main()
    #print("--- {sec} seconds ---".format(sec=time.time() - start_time))
