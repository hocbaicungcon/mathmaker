#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright 2006-2012 Nicolas Hainaux <nico_h@users.sourceforge.net>

# This file is part of Mathmaker.

# Mathmaker is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# Mathmaker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Mathmaker; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

import xml.etree.ElementTree as xml_tree
import os, sys, re
from tempfile import TemporaryFile
# Requires to install the polib package separately
# (it is called python3-polib in ubuntu repos)
import polib

PROCESS_NAME = os.path.basename(sys.argv[0])
ABSPATH = os.path.abspath(sys.argv[0])
__l1 = len(PROCESS_NAME)
__l2 = len(ABSPATH)
LOCALE_PATH = ABSPATH[:__l2-__l1]

KEYWORDS = ['header', 'title', 'text', 'subtitle', 'answers_title']
MAIN_POT_FILE_PATH = LOCALE_PATH + 'mathmaker.pot'

os.chdir('..')
PROJECT_ROOT = os.getcwd()

# collected_strings will look like:
# { "Sentence to translate" : ["#: file_name: line", "#: file_name: line", ...]}
collected_strings = {}

# Next method taken from
# http://stackoverflow.com/questions/4789171/python-reporting-line-column-of
# -origin-of-xml-node/27356944#27356944
LINE_DUMMY_ATTR = '_DUMMY_LINE'
def parse_xml(filename):
    with open(filename, "r") as f, TemporaryFile(mode='r+t') as tmp_file:
        l = 1
        for line in f:
            processed = re.sub(r'<(\w+)',
                               r'<\1 ' \
                               + LINE_DUMMY_ATTR \
                               + '="' \
                               + str(l) \
                               + '"',
                               line)
            l += 1
            tmp_file.write(processed)

        tmp_file.seek(0)

        return(xml_tree.parse(tmp_file).getroot())


##
#   @brief  Collects the strings to translate from the xml file.
def collect_strings(node, rel_file_name):
    for keyword in KEYWORDS:
        if keyword in node.attrib:
            if not node.attrib[keyword] in collected_strings:
                collected_strings[node.attrib[keyword]] = []

            collected_strings[node.attrib[keyword]] += \
                                [(rel_file_name, node.attrib[LINE_DUMMY_ATTR])]

            # collected_strings looks like:
            # {'Something to translate' : [("this_file.xml", 76),
            #                              ("this_other_file.xml", 34)],
            #  'Something else to translate' : [("another_file.xml", 21)],
            #  etc. }

    for child in node:
        collect_strings(child, rel_file_name)


##
#   @brief  Browse files looking for xml ones.
def browse_files(path):
    os.chdir(path)
    file_names = next(os.walk('.'))[2]

    for f in file_names:
        file_name, extension = os.path.splitext(f)
        if extension == '.xml' and file_name != 'tmp':
            abspath = os.getcwd() + "/" + f
            relpath = abspath[len(PROJECT_ROOT)+1:]
            collect_strings(parse_xml(f), relpath)

    for dir_name in next(os.walk('.'))[1]:
        browse_files(dir_name)

    os.chdir('..')


def main():
    browse_files('.')
    xml_pot_file = polib.POFile()
    for sentence in collected_strings:
        occ = []
        for elt in collected_strings[sentence]:
            occ += [(elt[0], elt[1])]

        new_entry = polib.POEntry(msgid=sentence, msgstr="", occurrences=occ)
        xml_pot_file.append(new_entry)

    main_pot_file = polib.pofile(MAIN_POT_FILE_PATH)

    for xml_entry in xml_pot_file:
        found = False
        for main_entry in main_pot_file:
            if xml_entry.msgid == main_entry.msgid:
                main_entry.merge(xml_entry)
                found = True
        if not found:
            main_pot_file.append(xml_entry)

    main_pot_file.save(MAIN_POT_FILE_PATH)


if __name__ == '__main__':
    main()
